import { useState } from "react";
import { FaPlus, FaTrash, FaCheck } from "react-icons/fa";
import Modal from "../components/Modal.jsx";
import {useAppContext} from "../components/AppContext.jsx";

export default function CreateVotingPage() {
    const [candidates, setCandidates] = useState([]);
    const [newCandidate, setNewCandidate] = useState("");

    const [voters, setVoters] = useState([]);
    const [newVoter, setNewVoter] = useState("");

    const [isModalOpen, setIsModalOpen] = useState(false);

    const {
        votingContract,
    } = useAppContext();  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

    // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const handleAddCandidate = () => {
        const trimmedName = newCandidate.trim();
        if (trimmedName && !candidates.includes(trimmedName)) {
            setCandidates([...candidates, trimmedName]);
            setNewCandidate("");
        }
    };

    // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const handleDeleteCandidate = (index) => {
        setCandidates(candidates.filter((_, i) => i !== index));
    };

    // ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const handleEditCandidate = (index, value) => {
        const updatedCandidates = [...candidates];
        updatedCandidates[index] = value;
        setCandidates(updatedCandidates);
    };

    // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    const handleAddVoter = () => {
        const trimmedName = newVoter.trim();
        if (trimmedName && !voters.includes(trimmedName)) {
            setVoters([...voters, trimmedName]);
            setNewVoter("");
        }
    };

    // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    const handleDeleteVoter = (index) => {
        setVoters(voters.filter((_, i) => i !== index));
    };

    // ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    const handleEditVoter = (index, value) => {
        const updatedVoters = [...voters];
        updatedVoters[index] = value;
        setVoters(updatedVoters);
    };

    // ‚úÖ Submit ‚Üí –æ—Ç–∫—Ä—ã—Ç—å Modal
    const handleSubmit = () => {
        setIsModalOpen(true);
    };

    return (
        <>
            <div className="flex justify-evenly items-stretch h-screen">
                {/* üì¶ –õ–µ–≤–∞—è —á–∞—Å—Ç—å */}
                <div className="flex-1 m-20 bg-secondary rounded-xl shadow-lg flex flex-col">
                    <h2 className="text-2xl text-center font-bold mt-5 mb-4">
                        Candidates
                    </h2>

                    {/* ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ */}
                    <div className="flex px-6 mb-4">
                        <input
                            type="text"
                            value={newCandidate}
                            onChange={(e) => setNewCandidate(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
                            className="flex-grow p-2 rounded-l-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                        <button
                            onClick={handleAddCandidate}
                            className="px-4 bg-primary text-white rounded-r-lg hover:bg-primary-light transition-colors"
                        >
                            <FaPlus />
                        </button>
                    </div>

                    {/* üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ */}
                    <div className="flex-1 px-6 overflow-y-auto">
                        <ul className="space-y-2">
                            {candidates.map((name, index) => (
                                <li
                                    key={index}
                                    className="p-2 bg-white rounded-lg shadow flex items-center justify-between"
                                >
                                    <input
                                        type="text"
                                        value={name}
                                        onChange={(e) => handleEditCandidate(index, e.target.value)}
                                        className="flex-grow bg-transparent border-none focus:outline-none text-primary"
                                    />
                                    <button
                                        onClick={() => handleDeleteCandidate(index)}
                                        className="ml-2 text-red-500 hover:text-red-700"
                                    >
                                        <FaTrash />
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>

                    {/* üîò Submit Button */}
                    <div className="p-4">
                        <button
                            onClick={handleSubmit}
                            className="w-full py-3 bg-primary text-white rounded-lg hover:bg-primary-light transition-colors"
                        >
                            <FaCheck className="inline mr-2" />
                            Submit
                        </button>
                    </div>
                </div>

                {/* üì¶ –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å */}
                <div className="flex-1 m-20 bg-secondary rounded-xl shadow-lg flex flex-col">
                    <h2 className="text-2xl text-center font-bold mt-5 mb-4">
                        Voters
                    </h2>

                    {/* ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ */}
                    <div className="flex px-6 mb-4">
                        <input
                            type="text"
                            value={newVoter}
                            onChange={(e) => setNewVoter(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ"
                            className="flex-grow p-2 rounded-l-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                        <button
                            onClick={handleAddVoter}
                            className="px-4 bg-primary text-white rounded-r-lg hover:bg-primary-light transition-colors"
                        >
                            <FaPlus />
                        </button>
                    </div>

                    {/* üìã –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—É—é—â–∏—Ö */}
                    <div className="flex-1 px-6 overflow-y-auto">
                        <ul className="space-y-2">
                            {voters.map((name, index) => (
                                <li
                                    key={index}
                                    className="p-2 bg-white rounded-lg shadow flex items-center justify-between"
                                >
                                    <input
                                        type="text"
                                        value={name}
                                        onChange={(e) => handleEditVoter(index, e.target.value)}
                                        className="flex-grow bg-transparent border-none focus:outline-none text-primary"
                                    />
                                    <button
                                        onClick={() => handleDeleteVoter(index)}
                                        className="ml-2 text-red-500 hover:text-red-700"
                                    >
                                        <FaTrash />
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>
                </div>
            </div>

            {/* Modal */}
            <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
                <h3 className="text-lg font-bold mb-4">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h3>
                <p className="mb-2 font-medium">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:</p>
                <ul className="mb-4 list-disc list-inside text-gray-700">
                    {candidates.map((c, i) => (
                        <li key={i}>{c}</li>
                    ))}
                </ul>
                <p className="mb-2 font-medium">–ì–æ–ª–æ—Å—É—é—â–∏–µ:</p>
                <ul className="list-disc list-inside text-gray-700">
                    {voters.map((v, i) => (
                        <li key={i}>{v}</li>
                    ))}
                </ul>
            </Modal>
        </>
    );
}
