import { useState } from "react";
import { FaPlus, FaSpinner, FaTrash, FaCheck } from "react-icons/fa";
import Modal from "../components/Modal.jsx";

export default function CreateVotingPage() {
    const [candidates, setCandidates] = useState([]);
    const [newCandidate, setNewCandidate] = useState("");

    const [voters, setVoters] = useState([]);
    const [newVoter, setNewVoter] = useState("");

    const [isModalOpen, setIsModalOpen] = useState(false);
    const [votingTitle, setVotingTitle] = useState("");
    const [endDateTime, setEndDateTime] = useState("");
    const [timeLeft, setTimeLeft] = useState("");

    const [loading, setLoading] = useState(false);
    const [resultMessage, setResultMessage] = useState("");
    const [errorMessages, setErrorMessages] = useState([]);

    // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const handleAddCandidate = () => {
        const trimmedName = newCandidate.trim();
        if (trimmedName && !candidates.includes(trimmedName)) {
            setCandidates([...candidates, trimmedName]);
            setNewCandidate("");
        }
    };

    // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const handleDeleteCandidate = (index) => {
        setCandidates(candidates.filter((_, i) => i !== index));
    };

    // ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const handleEditCandidate = (index, value) => {
        const updatedCandidates = [...candidates];
        updatedCandidates[index] = value;
        setCandidates(updatedCandidates);
    };

    // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    const handleAddVoter = () => {
        const trimmedName = newVoter.trim();
        if (trimmedName && !voters.includes(trimmedName)) {
            setVoters([...voters, trimmedName]);
            setNewVoter("");
        }
    };

    // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    const handleDeleteVoter = (index) => {
        setVoters(voters.filter((_, i) => i !== index));
    };

    // ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    const handleEditVoter = (index, value) => {
        const updatedVoters = [...voters];
        updatedVoters[index] = value;
        setVoters(updatedVoters);
    };

    // ‚úÖ Submit ‚Üí –æ—Ç–∫—Ä—ã—Ç—å Modal
    const handleSubmit = () => {
        setResultMessage("");
        setErrorMessages([]);
        setIsModalOpen(true);
        setDefaultEndDateTime();
    };

    // üóìÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∑–∞–≤—Ç—Ä–∞)
    const setDefaultEndDateTime = () => {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        const isoString = tomorrow.toISOString().slice(0, 16); // YYYY-MM-DDTHH:MM
        setEndDateTime(isoString);
        calculateTimeLeft(isoString);
    };

    // üïì –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    const calculateTimeLeft = (value) => {
        const targetDate = new Date(value);
        const now = new Date();
        const diff = targetDate - now;

        if (diff > 0) {
            const minutes = Math.floor((diff / 1000 / 60) % 60);
            const hours = Math.floor((diff / 1000 / 60 / 60) % 24);
            const days = Math.floor(diff / 1000 / 60 / 60 / 24);
            setTimeLeft(`–∫–æ–Ω–µ—Ü —á–µ—Ä–µ–∑ ${days} –¥–Ω–µ–π ${hours} —á–∞—Å–æ–≤ ${minutes} –º–∏–Ω—É—Ç`);
        } else {
            setTimeLeft("–î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞");
        }
    };

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    const validateVotingData = () => {
        const errors = [];
        const now = new Date();
        const end = new Date(endDateTime);

        if (votingTitle.trim() === "") {
            errors.push("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ.");
        }
        if (candidates.length === 0) {
            errors.push("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.");
        }
        if (voters.length === 0) {
            errors.push("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ.");
        }
        if (isNaN(end.getTime()) || end <= now) {
            errors.push("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.");
        }

        return errors;
    };

    // üì§ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const handleCreateVoting = () => {
        setLoading(true);
        setResultMessage("");
        setErrorMessages([]);

        setTimeout(() => {
            const errors = validateVotingData();

            if (errors.length > 0) {
                setErrorMessages(errors);
                setResultMessage("");
            } else {
                const targetDate = new Date(endDateTime);
                const now = new Date();
                const endsInSeconds = Math.max(Math.floor((targetDate - now) / 1000), 0);

                console.log("–°–æ–∑–¥–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:", {
                    title: votingTitle,
                    candidates,
                    voters,
                    endsInSeconds,
                });

                setResultMessage(`–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ "${votingTitle}" —Å–æ–∑–¥–∞–Ω–æ!`);
            }

            setLoading(false);
        }, 500);
    };

    return (
        <>
            <div className="flex justify-evenly items-stretch h-screen">
                {/* üì¶ –õ–µ–≤–∞—è —á–∞—Å—Ç—å */}
                <div className="flex-1 m-20 bg-secondary rounded-xl shadow-lg flex flex-col">
                    <h2 className="text-2xl text-center font-bold mt-5 mb-4">Candidates</h2>

                    {/* ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ */}
                    <div className="flex px-6 mb-4">
                        <input
                            type="text"
                            value={newCandidate}
                            onChange={(e) => setNewCandidate(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
                            className="flex-grow p-2 rounded-l-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                        <button
                            onClick={handleAddCandidate}
                            className="px-4 bg-primary text-white rounded-r-lg hover:bg-primary-light transition-colors"
                        >
                            <FaPlus />
                        </button>
                    </div>

                    {/* üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ */}
                    <div className="flex-1 px-6 overflow-y-auto">
                        <ul className="space-y-2">
                            {candidates.map((name, index) => (
                                <li
                                    key={index}
                                    className="p-2 bg-white rounded-lg shadow flex items-center justify-between"
                                >
                                    <input
                                        type="text"
                                        value={name}
                                        onChange={(e) => handleEditCandidate(index, e.target.value)}
                                        className="flex-grow bg-transparent border-none focus:outline-none text-primary"
                                    />
                                    <button
                                        onClick={() => handleDeleteCandidate(index)}
                                        className="ml-2 text-red-500 hover:text-red-700"
                                    >
                                        <FaTrash />
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>
                </div>

                {/* üì¶ –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å */}
                <div className="flex-1 m-20 bg-secondary rounded-xl shadow-lg flex flex-col">
                    <h2 className="text-2xl text-center font-bold mt-5 mb-4">Voters</h2>

                    {/* ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ */}
                    <div className="flex px-6 mb-4">
                        <input
                            type="text"
                            value={newVoter}
                            onChange={(e) => setNewVoter(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ"
                            className="flex-grow p-2 rounded-l-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                        <button
                            onClick={handleAddVoter}
                            className="px-4 bg-primary text-white rounded-r-lg hover:bg-primary-light transition-colors"
                        >
                            <FaPlus />
                        </button>
                    </div>

                    {/* üìã –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—É—é—â–∏—Ö */}
                    <div className="flex-1 px-6 overflow-y-auto">
                        <ul className="space-y-2">
                            {voters.map((name, index) => (
                                <li
                                    key={index}
                                    className="p-2 bg-white rounded-lg shadow flex items-center justify-between"
                                >
                                    <input
                                        type="text"
                                        value={name}
                                        onChange={(e) => handleEditVoter(index, e.target.value)}
                                        className="flex-grow bg-transparent border-none focus:outline-none text-primary"
                                    />
                                    <button
                                        onClick={() => handleDeleteVoter(index)}
                                        className="ml-2 text-red-500 hover:text-red-700"
                                    >
                                        <FaTrash />
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>
                </div>

                {/* üîò Submit Button –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–Ω–∏–∑—É */}
                <div className="absolute flex bottom-0 justify-center p-6">
                    <button
                        onClick={handleSubmit}
                        className="px-8 py-4 bg-primary text-xl text-white font-semibold rounded-4xl hover:bg-primary-light transition-colors shadow-lg"
                    >
                        <FaCheck className="inline mr-2" />
                        Submit
                    </button>
                </div>

            </div>



            {/* ü™ü Modal */}
            <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
                <h3 className="text-lg font-bold mb-4">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h3>

                {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
                <div className="mb-4">
                    <label className="block font-medium mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</label>
                    <input
                        type="text"
                        value={votingTitle}
                        onChange={(e) => setVotingTitle(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                        className="w-full p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary"
                    />
                </div>

                {/* –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è */}
                <div className="mb-4">
                    <label className="block font-medium mb-1">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</label>
                    <input
                        type="datetime-local"
                        value={endDateTime}
                        onChange={(e) => {
                            setEndDateTime(e.target.value);
                            calculateTimeLeft(e.target.value);
                        }}
                        className="w-full p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary"
                    />
                    {endDateTime && (
                        <p className="text-sm text-gray-600 mt-1">{timeLeft}</p>
                    )}
                </div>

                {/* –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –∏ –≥–æ–ª–æ—Å—É—é—â–∏–µ */}
                <div className="flex gap-4 mb-4">
                    {/* –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ */}
                    <div className="flex-1 bg-gray-100 rounded-lg p-3 max-h-[50ch] overflow-y-auto">
                        <p className="font-medium mb-2">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:</p>
                        <ol className="list-decimal list-inside text-gray-700">
                            {candidates.length ? (
                                candidates.map((c, i) => <li key={i}>{c}</li>)
                            ) : (
                                <li className="italic text-gray-400">–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</li>
                            )}
                        </ol>
                    </div>

                    {/* –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—É—é—â–∏—Ö */}
                    <div className="flex-1 bg-gray-100 rounded-lg p-3 max-h-[50ch] overflow-y-auto">
                        <p className="font-medium mb-2">–ì–æ–ª–æ—Å—É—é—â–∏–µ:</p>
                        <ol className="list-decimal list-inside text-gray-700">
                            {voters.length ? (
                                voters.map((v, i) => <li key={i}>{v}</li>)
                            ) : (
                                <li className="italic text-gray-400">–ù–µ—Ç –≥–æ–ª–æ—Å—É—é—â–∏—Ö</li>
                            )}
                        </ol>
                    </div>
                </div>

                {/* –û—à–∏–±–∫–∏ */}
                {errorMessages.length > 0 && (
                    <div className="mb-4 text-red-600">
                        {errorMessages.map((err, i) => (
                            <p key={i}>‚Ä¢ {err}</p>
                        ))}
                    </div>
                )}

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
                {resultMessage && (
                    <div className="mb-4 text-green-600 font-semibold">
                        {resultMessage}
                    </div>
                )}

                {/* –õ–æ–∞–¥–µ—Ä –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ */}
                {loading ? (
                    <div className="flex justify-center py-4">
                        <FaSpinner className="animate-spin text-primary text-2xl" />
                    </div>
                ) : resultMessage === "" ? (
                    <button
                        onClick={handleCreateVoting}
                        className="w-full py-3 bg-primary text-white rounded-lg hover:bg-primary-light transition-colors"
                    >
                        <FaCheck className="inline mr-2" />
                        –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                    </button>
                ) : null}
            </Modal>
        </>
    );
}
