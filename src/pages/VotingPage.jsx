import { useParams } from "react-router-dom";
import { useEffect, useState } from "react";
import { FaCheck } from "react-icons/fa";
import { castVote, getResults } from "../components/VotingMethods";
import { useAppContext } from "../components/AppContext";
import { ethers } from "ethers";

// const fakeRes = [0,1,2,3,4,3,2,1,0,1,1,1,1];
// const fakeMaxCnt = 4;

export default function VotingPage() {
    const { id } = useParams();
    const { votingContract, signer } = useAppContext();

    const [voteNumber, setVoteNumber]       = useState("");
    const [results, setResults]             = useState([]);
    const [error, setError]                 = useState(null);
    const [statusMessage, setStatusMessage] = useState("");

    // 1) –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        const loadResults = async () => {
            console.log("‚è≥ Loading results for vote:", id);
            try {
                const raw = await getResults(id, votingContract);
                console.log("‚úÖ Raw results from contract:", raw);
                const nums = raw.map(r => Number(r));
                console.log("üî¢ Parsed results:", nums);
                setResults(nums);
                setError("");

            } catch (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", err);
                if (err.message === `votingContract isn't loaded`){
                    setError("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å");
                } else {
                    setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã");
                }

            }
        };
        loadResults();
    }, [id, votingContract]);

    // 2) –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ª–æ–≤–∏–π
    const handleVoteSubmit = async () => {
        setError(null);
        setStatusMessage("");

        const parsedOption = parseInt(voteNumber, 10);
        if (isNaN(parsedOption)) {
            setError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏");
            return;
        }

        // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ voteId
        const voteId = ethers.encodeBytes32String(id);

        console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...");
        try {
            const check = await votingContract.checkVoteConditions(
                voteId,
                0, // placeholder
                parsedOption
            );
            console.log("‚úÖ checkVoteConditions returned:", check);
            if (check !== "OK") {
                setError("–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å: " + check);
                return;
            }
        } catch (e) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ checkVoteConditions:", e);
            setError("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π: " + (e.reason || e.data?.message || e.message));
            return;
        }

        console.log("üöÄ Conditions OK, calling castVote()");
        try {
            await castVote(id, parsedOption, signer, votingContract);
            console.log("‚úÖ –ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const raw = await getResults(id, votingContract);
            console.log("üîÅ Raw results after vote:", raw);
            const nums = raw.map(r => Number(r));
            console.log("üî¢ Parsed results after vote:", nums);
            setResults(nums);

            // üéâ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥–æ–ª–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            setStatusMessage("–ì–æ–ª–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
        } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:", err);

            // –ü–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
            const message = err.reason || err.data?.message || err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
            setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: " + message);
            setStatusMessage(""); // –û—á–∏—Å—Ç–∏—Ç—å "–ì–æ–ª–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        }
    };

    const [maxCount, setMaxCount] = useState(0);

    useEffect(()=>{
        setMaxCount(Math.max(...results));
    }, [results])


    return (
        <div className="flex justify-evenly items-stretch h-screen">
            {/* –õ–µ–≤—ã–π –±–ª–æ–∫ ‚Äî –≤–≤–æ–¥ –æ–ø—Ü–∏–∏ */}
            <div className="flex-1 m-20 bg-secondary rounded-xl shadow-lg flex flex-col">
                <h2 className="text-2xl text-center font-bold my-5">–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é</h2>
                <div className="flex-1 px-6 flex flex-col items-center justify-center w-full">
                    <div className="w-full max-h-96 overflow-y-auto bg-secondary rounded-lg p-2 space-y-2">
                        {results.map((_, index) => (
                            <div
                                key={index}
                                onClick={() => setVoteNumber(index.toString())}
                                className={`cursor-pointer rounded-lg px-4 py-3 shadow 
                        ${
                                    voteNumber === index.toString()
                                        ? "bg-primary text-white"
                                        : "bg-secondary-light hover:bg-primary-dim"
                                } transition-colors duration-200`}
                            >
                                <p className="text-lg font-bold">–û–ø—Ü–∏—è {index}</p>
                            </div>
                        ))}
                    </div>
                </div>

                <div className="flex justify-between items-center bg-tetriary p-4 rounded-b-xl">
                    {/* Error / Status Message */}
                    <div className="flex-shrink-0 w-0 flex-1 mr-4 overflow-hidden">
                        <p className="text-red-500 text-sm break-words">
                            {error || statusMessage}
                        </p>
                    </div>

                    {/* Submit Button */}
                    <button
                        onClick={handleVoteSubmit}
                        disabled={voteNumber === ""}
                        className="w-12 h-12 flex items-center justify-center
                        bg-primary text-white rounded-lg hover:bg-primary-light transition-all
                        disabled:opacity-50 disabled:text-gray-400"
                    >
                        <FaCheck size={20} />
                    </button>
                </div>


            </div>

            {/* –ü—Ä–∞–≤—ã–π –±–ª–æ–∫ ‚Äî –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
            <div className="flex-1 m-20 bg-secondary rounded-xl shadow-lg flex flex-col items-center text-center">
                <h2 className="text-2xl font-bold my-5">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
                <div className="grow space-y-2 flex w-full p-6 flex-col my-auto items-stretch overflow-y-auto rounded-b-xl bg-secondary-light">
                    {results.map((count, index) => (
                    // {fakeRes.map((count, index) => (
                        <div
                            key={index}
                            className="relative flex justify-between bg-primary-dim rounded-lg px-4 py-2 shadow-lg"
                        >
                            {/* Fill */}
                            <div
                                className="absolute inset-0 bg-primary opacity-80 rounded-lg "
                                style={{ width: `${(count / maxCount) * 100}%` }}
                                // style={{width: `${count/fakeMaxCnt * 100}%`}}
                            ></div>

                            {/* Content */}
                            <p className="relative z-10 text-left text-lg font-semibold text-gray-200">–û–ø—Ü–∏—è {index}</p>
                            <p className="relative z-10 text-right text-gray-700">{count}</p>
                        </div>
                    ))}
                </div>
            </div>

        </div>
    );
}
